//el ajedrez definivo version 2
//ahora sin errores
//por Carlos Leonel Barrera Gamboa
// Incluir las librerías necesarias
#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

// Definir las constantes para el tablero y las piezas
const int FILAS = 8;
const int COLUMNAS = 8;
const char VACIO = '.';
const char PEON_BLANCO = 'P';
const char PEON_NEGRO = 'p';
const char TORRE_BLANCA = 'T';
const char TORRE_NEGRA = 't';
const char CABALLO_BLANCO = 'C';
const char CABALLO_NEGRO = 'c';
const char ALFIL_BLANCO = 'A';
const char ALFIL_NEGRO = 'a';
const char REINA_BLANCA = 'Q';
const char REINA_NEGRA = 'q';
const char REY_BLANCO = 'K';
const char REY_NEGRO = 'k';

// Definir una estructura para representar una posición en el tablero
struct Posicion {
  int fila;
  int columna;
};

// Definir una estructura para representar un movimiento de una pieza
struct Movimiento {
  Posicion origen;
  Posicion destino;
};

// Definir una variable global para almacenar el tablero
char tablero[FILAS][COLUMNAS];

// Definir una función para inicializar el tablero con las piezas iniciales
void inicializarTablero() {
  // Llenar el tablero con espacios vacíos
  for (int i = 0; i < FILAS; i++) {
    for (int j = 0; j < COLUMNAS; j++) {
      tablero[i][j] = VACIO;
    }
  }
  
  // Colocar los peones blancos y negros en las filas correspondientes
  for (int j = 0; j < COLUMNAS; j++) {
    tablero[1][j] = PEON_NEGRO;
    tablero[6][j] = PEON_BLANCO;
  }
  
  // Colocar las torres blancas y negras en las esquinas del tablero
  tablero[0][0] = TORRE_NEGRA;
  tablero[0][7] = TORRE_NEGRA;
  tablero[7][0] = TORRE_BLANCA;
  tablero[7][7] = TORRE_BLANCA;
  
  // Colocar los caballos blancos y negros al lado de las torres
  tablero[0][1] = CABALLO_NEGRO;
  tablero[0][6] = CABALLO_NEGRO;
  tablero[7][1] = CABALLO_BLANCO;
  tablero[7][6] = CABALLO_BLANCO;
  
  // Colocar los alfiles blancos y negros al lado de los caballos
  tablero[0][2] = ALFIL_NEGRO;
  tablero[0][5] = ALFIL_NEGRO;
  tablero[7][2] = ALFIL_BLANCO;
  tablero[7][5] = ALFIL_BLANCO;
  
  // Colocar las reinas blancas y negras en el centro del tablero
  tablero[0][3] = REINA_NEGRA;
  tablero[7][3] = REINA_BLANCA;
  
  // Colocar los reyes blancos y negros al lado de las reinas
  tablero[0][4] = REY_NEGRO;
  tablero[7][4] = REY_BLANCO;
}

// Definir una función para mostrar el tablero por la pantalla
void mostrarTablero() {
  // Mostrar los números de las columnas
  cout << " ";
  for (int j = 0; j < COLUMNAS; j++) {
    cout << " " << j + 1;
  }
  cout << "\n";
  
  // Mostrar el contenido del tablero y los números de las filas
  for (int i = 0; i < FILAS; i++) {
    cout << i + 1 << " ";
    for (int j = 0; j < COLUMNAS; j++) {
      cout << tablero[i][j] << " ";
    }
    cout << "\n";
  }
}

// Definir una función para validar si una posición está dentro del tablero
bool esValida(Posicion p) {
  return p.fila >= 0 && p.fila < FILAS && p.columna >= 0 && p.columna < COLUMNAS;
}

// Definir una función para validar si una posición está vacía
bool estaVacia(Posicion p) {
  return tablero[p.fila][p.columna] == VACIO;
}

// Definir una función para validar si una posición contiene una pieza del mismo color que otra
bool esMismoColor(Posicion p1, Posicion p2) {
  char pieza1 = tablero[p1.fila][p1.columna];
  char pieza2 = tablero[p2.fila][p2.columna];
  return (isupper(pieza1) && isupper(pieza2)) || (islower(pieza1) && islower(pieza2));
}

// Definir una función para validar si un movimiento es válido para un peón
bool esValidoPeon(Movimiento m) {
  // Obtener la dirección del movimiento según el color del peón
  int direccion = isupper(tablero[m.origen.fila][m.origen.columna]) ? -1 : 1;
  
  // Validar si el movimiento es vertical y de una sola casilla
  if (m.destino.columna == m.origen.columna && m.destino.fila == m.origen.fila + direccion) {
    // Validar si la casilla destino está vacía
    return estaVacia(m.destino);
  }
  
  // Validar si el movimiento es diagonal y de una sola casilla
  if (abs(m.destino.columna - m.origen.columna) == 1 && m.destino.fila == m.origen.fila + direccion) {
    // Validar si la casilla destino contiene una pieza del color contrario
    return !estaVacia(m.destino) && !esMismoColor(m.origen, m.destino);
  }
  
  // Validar si el movimiento es vertical y de dos casillas desde la posición inicial
  if (m.destino.columna == m.origen.columna && m.destino.fila == m.origen.fila + 2 * direccion) {
    // Validar si el peón está en la segunda fila (blanco) o en la séptima fila (negro)
    if ((direccion == -1 && m.origen.fila == 6) || (direccion == 1 && m.origen.fila == 1)) {
      // Validar si las casillas destino y la intermedia están vacías
      Posicion intermedia;
      intermedia.fila = m.origen.fila + direccion;
      intermedia.columna = m.origen.columna;
      return estaVacia(m.destino) && estaVacia(intermedia);
    }
  }
  
  // En cualquier otro caso, el movimiento no es válido
  return false;
}

// Definir una función para validar si un movimiento es válido para una torre
bool esValidoTorre(Movimiento m) {
  // Validar si el movimiento es horizontal o vertical
  if (m.destino.fila == m.origen.fila || m.destino.columna == m.origen.columna) {
    // Obtener la dirección y la distancia del movimiento
    int direccionFila = m.destino.fila > m.origen.fila ? 1 : (m.destino.fila < m.origen.fila ? -1 : 0);
    int direccionColumna = m.destino.columna > m.origen.columna ? 1 : (m.destino.columna < m.origen.columna ? -1 : 0);
    int distancia = max(abs(m.destino.fila - m.origen.fila), abs(m.destino.columna - m.origen.columna));
    
    // Recorrer las casillas intermedias entre el origen y el destino
    for (int i = 1; i < distancia; i++) {
      // Obtener la posición de la casilla intermedia
      Posicion intermedia;
      intermedia.fila = m.origen.fila + i * direccionFila;
      intermedia.columna = m.origen.columna + i * direccionColumna;
      
      // Validar si la casilla intermedia está vacía
      if (!estaVacia(intermedia)) {
        // Si no lo está, el movimiento no es válido
        return false;
      }
    }
    
    // Validar si la casilla destino está vacía o contiene una pieza del color contrario
    return estaVacia(m.destino) || !esMismoColor(m.origen, m.destino);
    
  } else {
    // En cualquier otro caso, el movimiento no es válido
    return false;
  }
}

// Definir una función para validar si un movimiento es válido para un caballo
bool esValidoCaballo(Movimiento m) {
  // Validar si el movimiento es en forma de L (dos casillas en una dirección y una en otra)
  if ((abs(m.destino.fila - m.origen.fila) == 2 && abs(m.destino.columna - m.origen.columna) == 1) ||
      (abs(m.destino.fila - m.origen.fila) == 1 && abs(m.destino.columna - m.origen.columna) == 2)) {
    // Validar si la casilla destino está vacía o contiene una pieza del color contrario
    return estaVacia(m.destino) || !esMismoColor(m.origen, m.destino);
  } else {
    // En cualquier otro caso, el movimiento no es válido
    return false;
  }
}

// Definir una función para validar si un movimiento es válido para un alfil
bool esValidoAlfil(Movimiento m) {
  // Validar si el movimiento es diagonal
  if (abs(m.destino.fila - m.origen.fila) == abs(m.destino.columna - m.origen.columna)) {
    // Obtener la dirección y la distancia del movimiento
    int direccionFila = m.destino.fila > m.origen.fila ? 1 : -1;
    int direccionColumna = m.destino.columna > m.origen.columna ? 1 : -1;
    int distancia = abs(m.destino.fila - m.origen.fila);
    
    // Recorrer las casillas intermedias entre el origen y el destino
    for (int i = 1; i < distancia; i++) {
      // Obtener la posición de la casilla intermedia
      Posicion intermedia;
      intermedia.fila = m.origen.fila + i * direccionFila;
      intermedia.columna = m.origen.columna + i * direccionColumna;
      
      // Validar si la casilla intermedia está vacía
      if (!estaVacia(intermedia)) {
        // Si no lo está, el movimiento no es válido
        return false;
      }
    }
    
    // Validar si la casilla destino está vacía o contiene una pieza del color contrario
    return estaVacia(m.destino) || !esMismoColor(m.origen, m.destino);
    
  } else {
    // En cualquier otro caso, el movimiento no es válido
    return false;
  }
}

// Definir una función para validar si un movimiento es válido para una reina
bool esValidoReina(Movimiento m) {
  // Validar si el movimiento es válido para una torre o para un alfil
  return esValidoTorre(m) || esValidoAlfil(m);
}

// Definir una función para validar si un movimiento es válido para un rey
bool esValidoRey(Movimiento m) {
  // Validar si el movimiento es de una sola casilla en cualquier dirección
  if (abs(m.destino.fila - m.origen.fila) <= 1 && abs(m.destino.columna - m.origen.columna) <= 1) {
    // Validar si la casilla destino está vacía o contiene una pieza del color contrario
    return estaVacia(m.destino) || !esMismoColor(m.origen, m.destino);
  } else {
    // En cualquier otro caso, el movimiento no es válido
    return false;
  }
}

// Definir una función para validar si un movimiento es válido según la pieza que se mueve
bool esValido(Movimiento m) {
  // Obtener la pieza que se mueve
  char pieza = tablero[m.origen.fila][m.origen.columna];
  
  // Validar si la posición origen contiene una pieza y la posición destino está dentro del tablero
  if (pieza != VACIO && esValida(m.destino)) {
    // Validar el movimiento según el tipo de pieza
    switch (toupper(pieza)) {
      case PEON_BLANCO:
        return esValidoPeon(m);
      case TORRE_BLANCA:
        return esValidoTorre(m);
      case CABALLO_BLANCO:
        return esValidoCaballo(m);
      case ALFIL_BLANCO:
        return esValidoAlfil(m);
      case REINA_BLANCA:
        return esValidoReina(m);
      case REY_BLANCO:
        return esValidoRey(m);
      default:
        return false;
    }
  } else {
    // En cualquier otro caso, el movimiento no es válido
    return false;
  }
}

// Definir una función para mover una pieza en el tablero
void mover(Movimiento m) {
  // Obtener la pieza que se mueve
  char pieza = tablero[m.origen.fila][m.origen.columna];
  
  // Colocar la pieza en la casilla destino y vaciar la casilla origen
  tablero[m.destino.fila][m.destino.columna] = pieza;
  tablero[m.origen.fila][m.origen.columna] = VACIO;
}

// Definir una función para generar un movimiento aleatorio para la computadora
Movimiento generarMovimiento() {
  // Crear una variable para almacenar el movimiento generado
  Movimiento m;
  
  // Crear una variable para indicar si el movimiento es válido
  bool valido = false;
  
  // Repetir hasta encontrar un movimiento válido
  while (!valido) {
    // Generar una posición origen aleatoria
    m.origen.fila = rand() % FILAS;
    m.origen.columna = rand() % COLUMNAS;
    
    // Generar una posición destino aleatoria
    m.destino.fila = rand() % FILAS;
    m.destino.columna = rand() % COLUMNAS;
    
    // Validar si el movimiento es válido para una pieza negra
    if (islower(tablero[m.origen.fila][m.origen.columna]) && esValido(m)) {
      // Indicar que el movimiento es válido
      valido = true;
    }
  }
  
  // Devolver el movimiento generado
  return m;
}

// Definir una función para leer un movimiento del usuario
Movimiento leerMovimiento() {
  // Crear una variable para almacenar el movimiento leído
  Movimiento m;
  
  // Crear una variable para indicar si el movimiento es válido
  bool valido = false;
  
  // Repetir hasta leer un movimiento válido
  while (!valido) {
    // Pedir al usuario que ingrese la posición origen y destino de la pieza que quiere mover
    cout << "Ingrese la fila y columna de la pieza que quiere mover: ";
    cin >> m.origen.fila >> m.origen.columna;
    
    cout << "Ingrese la fila y columna de la casilla a donde quiere mover la pieza: ";
    cin >> m.destino.fila >> m.destino.columna;
    
    // Ajustar los valores leídos al rango [0,7]
    m.origen.fila--;
    m.origen.columna--;
    m.destino.fila--;
    m.destino.columna--;
    
    // Validar si el movimiento es válido para una pieza blanca
    if (isupper(tablero[m.origen.fila][m.origen.columna]) && esValido(m)) {
      // Indicar que el movimiento es válido
      valido = true;
    } else {
      // Mostrar un mensaje de error
      cout << "Movimiento inválido. Intente de nuevo.\n";
    }
  }
  
  // Devolver el movimiento leído
  return m;
}

// Definir una función para determinar si el juego ha terminado
bool juegoTerminado() {
  // Crear una variable para contar los reyes en el tablero
  int reyes = 0;
  
  // Recorrer el tablero buscando los reyes
  for (int i = 0; i < FILAS; i++) {
    for (int j = 0; j < COLUMNAS; j++) {
      // Si se encuentra un rey, incrementar el contador
      if (toupper(tablero[i][j]) == REY_BLANCO) {
        reyes++;
      }
    }
  }
  
  // Devolver si el contador de reyes es menor que dos
  return reyes < 2;
}

// Definir una función para determinar el ganador del juego
char ganador() {
  // Recorrer el tablero buscando el rey que queda
  for (int i = 0; i < FILAS; i++) {
    for (int j = 0; j < COLUMNAS; j++) {
      // Si se encuentra un rey, devolver su color
      if (toupper(tablero[i][j]) == REY_BLANCO) {
        return tablero[i][j];
      }
    }
  }
  
  // En caso de no encontrar ningún rey, devolver un espacio vacío
  return VACIO;
}

// Definir una función para mostrar el menú de opciones del juego
void mostrarMenu() {
  // Mostrar las opciones disponibles
  cout << "Bienvenido al juego de ajedrez. Elija un modo de juego:\n";
  cout << "1. Jugar contra otro jugador\n";
  cout << "2. Jugar contra la computadora\n";
  cout << "3. Salir del juego\n";
}

// Definir una función para leer la opción elegida por el usuario
int leerOpcion() {
  // Crear una variable para almacenar la opción leída
  int opcion;
  
  // Crear una variable para indicar si la opción es válida
  bool valido = false;
  
  // Repetir hasta leer una opción válida
  while (!valido) {
    // Pedir al usuario que ingrese la opción
    cout << "Ingrese un modo: ";
    cin >> opcion;
    
    // Validar si la opción está en el rango [1,3]
    if (opcion >= 1 && opcion <= 3) {
      // Indicar que la opción es válida
      valido = true;
    } else {
      // Mostrar un mensaje de error
      cout << "Opción inválida. Intente de nuevo.\n";
    }
  }
  
  // Devolver la opción leída
  return opcion;
}

// Definir una función para ejecutar el juego según la opción elegida
void ejecutarJuego(int opcion) {
  // Crear una variable para indicar el turno del jugador (blanco o negro)
  char turno = 'B';
  
  // Crear una variable para almacenar el movimiento realizado
  Movimiento m;
  
  // Inicializar el tablero con las piezas iniciales
  inicializarTablero();
  
  // Mostrar el tablero por la pantalla
  mostrarTablero();
  
  // Repetir hasta que el juego termine
  while (!juegoTerminado()) {
    // Mostrar el turno del jugador
    cout << "Turno del jugador " << turno << "\n";
    
    // Realizar el movimiento según la opción elegida
    switch (opcion) {
      case 1: // Jugar contra otro jugador
        // Leer el movimiento del usuario
        m = leerMovimiento();
        break;
      case 2: // Jugar contra la computadora
        // Si el turno es del jugador blanco, leer el movimiento del usuario
        if (turno == 'B') {
          m = leerMovimiento();
        } else {
          // Si el turno es del jugador negro, generar el movimiento de la computadora
          m = generarMovimiento();
          // Mostrar el movimiento generado por la pantalla
          cout << "La computadora mueve de (" << m.origen.fila + 1 << "," << m.origen.columna + 1 << ") a (" << m.destino.fila + 1 << "," << m.destino.columna + 1 << ")\n";
        }
        break;
      default: // Salir del juego
        return;
    }
    
    // Mover la pieza en el tablero
    mover(m);
    
    // Mostrar el tablero por la pantalla
    mostrarTablero();
    
    // Cambiar el turno del jugador
    turno = turno == 'B' ? 'N' : 'B';
  }
  
  // Mostrar el ganador del juego por la pantalla
  char g = ganador();
  if (g == REY_BLANCO) {
    cout << "El ganador es el jugador blanco\n";
  } else if (g == REY_NEGRO) {
    cout << "El ganador es el jugador negro\n";
  } else {
    cout << "El juego terminó en empate\n";
  }
}

// Definir la función principal del programa
int main() {
  // Crear una variable para almacenar la opción elegida por el usuario
  int opcion;
  
  // Inicializar la semilla del generador de números aleatorios
  srand(time(NULL));
  
  // Repetir hasta que el usuario elija salir del juego
  do {
    // Mostrar el menú de opciones del juego
    mostrarMenu();
    
    // Leer la opción elegida por el usuario
    opcion = leerOpcion();
    
    // Ejecutar el juego según la opción elegida
    ejecutarJuego(opcion);
    
  } while (opcion != 3);
  
  // Mostrar un mensaje de despedida
  cout << "Gracias por jugar. Hasta pronto.\n";
  
  // Terminar el programa
  return 0;
}
